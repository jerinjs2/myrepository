
Memory Configuration

Name             Origin             Length             Attributes
MFlash32         0x0000000000000000 0x0000000000008000 xr
RamLoc8          0x0000000010000000 0x0000000000002000 xrw
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

START GROUP
LOAD /usr/local/mcuxpressoide-11.0.1_2563/ide/plugins/com.nxp.mcuxpresso.tools.linux_11.0.1.201907311258/tools/bin/../lib/gcc/arm-none-eabi/8.2.1/../../../../arm-none-eabi/lib/thumb/v7-m/nofp/libcr_c.a
LOAD /usr/local/mcuxpressoide-11.0.1_2563/ide/plugins/com.nxp.mcuxpresso.tools.linux_11.0.1.201907311258/tools/bin/../lib/gcc/arm-none-eabi/8.2.1/thumb/v7-m/nofp/libcr_eabihelpers.a
LOAD /usr/local/mcuxpressoide-11.0.1_2563/ide/plugins/com.nxp.mcuxpresso.tools.linux_11.0.1.201907311258/tools/bin/../lib/gcc/arm-none-eabi/8.2.1/thumb/v7-m/nofp/libgcc.a
END GROUP
                0x0000000000000000                __base_MFlash32 = 0x0
                0x0000000000000000                __base_Flash = 0x0
                0x0000000000008000                __top_MFlash32 = 0x8000
                0x0000000000008000                __top_Flash = 0x8000
                0x0000000010000000                __base_RamLoc8 = 0x10000000
                0x0000000010000000                __base_RAM = 0x10000000
                0x0000000010002000                __top_RamLoc8 = 0x10002000
                0x0000000010002000                __top_RAM = 0x10002000

.text           0x0000000000000000       0x14
 FILL mask 0xff
                0x0000000000000000                __vectors_start__ = ABSOLUTE (.)
 *(.isr_vector)
                0x0000000000000000                . = ALIGN (0x4)
                0x0000000000000000                __section_table_start = .
                0x0000000000000000                __data_section_table = .
                0x0000000000000000        0x4 LONG 0x14 LOADADDR (.data)
                0x0000000000000004        0x4 LONG 0x10000000 ADDR (.data)
                0x0000000000000008        0x4 LONG 0x0 SIZEOF (.data)
                0x000000000000000c                __data_section_table_end = .
                0x000000000000000c                __bss_section_table = .
                0x000000000000000c        0x4 LONG 0x10000000 ADDR (.bss)
                0x0000000000000010        0x4 LONG 0x0 SIZEOF (.bss)
                0x0000000000000014                __bss_section_table_end = .
                0x0000000000000014                __section_table_end = .
 *(.after_vectors*)
 *(.text*)
 *(.rodata .rodata.* .constdata .constdata.*)
                0x0000000000000014                . = ALIGN (0x4)

.glue_7         0x0000000000000014        0x0
 .glue_7        0x0000000000000014        0x0 linker stubs

.glue_7t        0x0000000000000014        0x0
 .glue_7t       0x0000000000000014        0x0 linker stubs

.vfp11_veneer   0x0000000000000014        0x0
 .vfp11_veneer  0x0000000000000014        0x0 linker stubs

.v4_bx          0x0000000000000014        0x0
 .v4_bx         0x0000000000000014        0x0 linker stubs

.ARM.extab
 *(.ARM.extab* .gnu.linkonce.armextab.*)
                0x0000000000000014                __exidx_start = .

.ARM.exidx
 *(.ARM.exidx* .gnu.linkonce.armexidx.*)
                0x0000000000000014                __exidx_end = .
                0x0000000000000014                _etext = .

.uninit_RESERVED
                0x0000000010000000        0x0
                0x0000000010000000                . = ALIGN (0x4)
 *(.bss.$RESERVED*)
                0x0000000010000000                . = ALIGN (0x4)
                0x0000000010000000                _end_uninit_RESERVED = .

.data           0x0000000010000000        0x0 load address 0x0000000000000014
 FILL mask 0xff
                0x0000000010000000                _data = .
 *(vtable)
 *(.ramfunc*)
 *(CodeQuickAccess)
 *(DataQuickAccess)
 *(RamFunction)
 *(.data*)
                0x0000000010000000                . = ALIGN (0x4)
                0x0000000010000000                _edata = .

.bss            0x0000000010000000        0x0 load address 0x0000000000000014
                0x0000000010000000                . = ALIGN (0x4)
                0x0000000010000000                _bss = .
 *(.bss*)
 *(COMMON)
                0x0000000010000000                . = ALIGN (0x4)
                0x0000000010000000                _ebss = .
                [!provide]                        PROVIDE (end = .)

.noinit         0x0000000010000000        0x0 load address 0x0000000000000014
                0x0000000010000000                . = ALIGN (0x4)
                0x0000000010000000                _noinit = .
 *(.noinit*)
                0x0000000010000000                . = ALIGN (0x4)
                0x0000000010000000                _end_noinit = .
                [!provide]                        PROVIDE (_pvHeapStart = DEFINED (__user_heap_base)?__user_heap_base:.)
                [!provide]                        PROVIDE (_vStackTop = DEFINED (__user_stack_top)?__user_stack_top:(__top_RamLoc8 - 0x0))
                [!provide]                        PROVIDE (__valid_user_code_checksum = (0x0 - ((((((_vStackTop + (ResetISR + 0x1)) + (NMI_Handler + 0x1)) + (HardFault_Handler + 0x1)) + (DEFINED (MemManage_Handler)?MemManage_Handler:0x0 + 0x1)) + (DEFINED (BusFault_Handler)?BusFault_Handler:0x0 + 0x1)) + (DEFINED (UsageFault_Handler)?UsageFault_Handler:0x0 + 0x1))))
                0x0000000000000000                _image_start = LOADADDR (.text)
                0x0000000000000014                _image_end = (LOADADDR (.data) + SIZEOF (.data))
                0x0000000000000014                _image_size = (_image_end - _image_start)
OUTPUT(mcu test.axf elf32-littlearm)

Cross Reference Table

Symbol                                            File
No symbols
